pipeline {
     agent {
          kubernetes {
               inheritFrom 'mypod'
               yaml '''
                    apiVersion: v1
                    kind: Pod
                    spec:
                         containers:
                         - name: gradle
                           image: gradle:6.3-jdk14
                           command:
                           - sleep
                           args:
                           - 99d
                           volumeMounts:
                           - name: shared-storage
                             mountPath: /mnt        
                         - name: kaniko
                           image: gcr.io/kaniko-project/executor:debug
                           command:
                           - sleep
                           args:
                           - 9999999
                           volumeMounts:
                           - name: shared-storage
                             mountPath: /mnt
                           - name: kaniko-secret
                             mountPath: /kaniko/.docker
                         restartPolicy: Never
                         volumes:
                         - name: shared-storage
                           persistentVolumeClaim:
                             claimName: jenkins-pv-claim
                         - name: kaniko-secret
                           secret:
                              secretName: dockercred
                              items:
                              - key: .dockerconfigjson
                                path: config.json
                    '''
          }
     }
     stages {
          stage("Compile") {
               when {branch 'main'}
               steps {
                    container('gradle') {
                         sh "echo Running code coverage only in the ${env.BRANCH_NAME} branch"
                         sh '''
                         cd $WORKSPACE/week6-exercise
                         chmod +x ./gradlew
                         '''
                    }
               }
          }
          stage("Unit test") {
               when { not { branch 'playground' } }
               steps {
                    container('gradle') {
                     sh "cd $WORKSPACE/week6-exercise"
                     sh "./gradlew test"
                    }
               }
          }
          stage("Code coverage") {
               when { not { branch 'playground' } }
               steps {
                    container('gradle') {
                         sh "cd $WORKSPACE/week6-exercise"
                         sh "./gradlew jacocoTestReport"
                         sh "./gradlew jacocoTestCoverageVerification"
                    }
               }
          }
          stage("Static code analysis") {
               when { not { branch 'playground' } }
               steps {
                    container('gradle') {
                         sh "cd $WORKSPACE/week6-exercise"
                         sh "./gradlew checkstyleMain"
                    }
               }
          }
          stage("Package") {
               steps {
                    container('gradle') {
                         sh "cd $WORKSPACE/week6-exercise"
                         sh "./gradlew build"
                         sh "mv ./build/libs/calculator-0.0.1-SNAPSHOT.jar /mnt"
                    }
               }
          }
          stage("Build Java Image") {
               when { not { branch 'playground' } }
               steps {
                    container('kaniko') {
                         sh '''
                         echo 'FROM openjdk:8-jre' > Dockerfile
                         echo 'COPY ./calculator-0.0.1-SNAPSHOT.jar app.jar' >> Dockerfile
                         echo 'ENTRYPOINT ["java", "-jar", "app.jar"]' >> Dockerfile
                         mv /mnt/calculator-0.0.1-SNAPSHOT.jar .
                         /kaniko/executor --context `pwd` --destination evish/$IMG_NAME:$IMG_VER
                         '''
                    }
               }
          }
     }
}